#!/usr/bin/env node
import { Command, InvalidOptionArgumentError } from 'commander';
import { pathToFileURL } from 'node:url';

import { startDashboardServer } from './dashboard/server.js';

export { createUsageLoggerMiddleware } from './usage-logger.js';
export { startDashboardServer } from './dashboard/server.js';
export type { DashboardServerHandle, DashboardServerOptions } from './dashboard/server.js';
export type { LoggerOptions, LLMCallRow, SaveFn, TokenUsageNormalized } from './types.js';

if (isCliInvocation(import.meta.url)) {
  runCli().catch((error) => {
    // eslint-disable-next-line no-console
    console.error(error instanceof Error ? error.message : error);
    process.exit(1);
  });
}

async function runCli(): Promise<void> {
  const program = new Command();

  program
    .name('ai-sdk-usage')
    .description('Dashboard and logging utilities for monitoring AI SDK usage and costs');

  program
    .command('dashboard')
    .argument('<dbPath>', 'Path to the SQLite database generated by the usage middleware')
    .option('-p, --port <port>', 'Port to bind the dashboard server', '4545')
    .option('--host <host>', 'Host to bind the dashboard server', '127.0.0.1')
    .action(async (dbPath: string, options: { port?: string; host?: string }) => {
      const parsedPort = options.port ? Number.parseInt(options.port, 10) : 4545;
      if (!Number.isInteger(parsedPort) || parsedPort <= 0 || parsedPort > 65535) {
        throw new InvalidOptionArgumentError('Port must be an integer between 1 and 65535.');
      }

      const host = options.host ?? '127.0.0.1';
      const handle = await startDashboardServer({ dbPath, port: parsedPort, host });

      const shutdown = async () => {
        try {
          await handle.close();
          process.exit(0);
        } catch (error) {
          // eslint-disable-next-line no-console
          console.error(error instanceof Error ? error.message : error);
          process.exit(1);
        }
      };

      process.once('SIGINT', shutdown);
      process.once('SIGTERM', shutdown);

      // eslint-disable-next-line no-console
      console.log(`Usage dashboard available at ${handle.url}`);
      // eslint-disable-next-line no-console
      console.log(`Reading data from ${handle.dbPath}`);
      // eslint-disable-next-line no-console
      console.log('Press Ctrl+C to stop the server.');
    });

  await program.parseAsync(process.argv);
}

function isCliInvocation(moduleUrl: string): boolean {
  const entryPoint = process.argv?.[1];
  if (!entryPoint) return false;
  try {
    return pathToFileURL(entryPoint).href === moduleUrl;
  } catch {
    return false;
  }
}
